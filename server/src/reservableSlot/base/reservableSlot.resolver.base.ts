/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateReservableSlotArgs } from "./CreateReservableSlotArgs";
import { UpdateReservableSlotArgs } from "./UpdateReservableSlotArgs";
import { DeleteReservableSlotArgs } from "./DeleteReservableSlotArgs";
import { ReservableSlotFindManyArgs } from "./ReservableSlotFindManyArgs";
import { ReservableSlotFindUniqueArgs } from "./ReservableSlotFindUniqueArgs";
import { ReservableSlot } from "./ReservableSlot";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { ReservableSlotService } from "../reservableSlot.service";

@graphql.Resolver(() => ReservableSlot)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ReservableSlotResolverBase {
  constructor(
    protected readonly service: ReservableSlotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReservableSlot",
    action: "read",
    possession: "any",
  })
  async _reservableSlotsMeta(
    @graphql.Args() args: ReservableSlotFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ReservableSlot])
  @nestAccessControl.UseRoles({
    resource: "ReservableSlot",
    action: "read",
    possession: "any",
  })
  async reservableSlots(
    @graphql.Args() args: ReservableSlotFindManyArgs
  ): Promise<ReservableSlot[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ReservableSlot, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReservableSlot",
    action: "read",
    possession: "own",
  })
  async reservableSlot(
    @graphql.Args() args: ReservableSlotFindUniqueArgs
  ): Promise<ReservableSlot | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReservableSlot)
  @nestAccessControl.UseRoles({
    resource: "ReservableSlot",
    action: "create",
    possession: "any",
  })
  async createReservableSlot(
    @graphql.Args() args: CreateReservableSlotArgs
  ): Promise<ReservableSlot> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        timeSlot: {
          connect: args.data.timeSlot,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReservableSlot)
  @nestAccessControl.UseRoles({
    resource: "ReservableSlot",
    action: "update",
    possession: "any",
  })
  async updateReservableSlot(
    @graphql.Args() args: UpdateReservableSlotArgs
  ): Promise<ReservableSlot | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          timeSlot: {
            connect: args.data.timeSlot,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReservableSlot)
  @nestAccessControl.UseRoles({
    resource: "ReservableSlot",
    action: "delete",
    possession: "any",
  })
  async deleteReservableSlot(
    @graphql.Args() args: DeleteReservableSlotArgs
  ): Promise<ReservableSlot | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Reservation])
  @nestAccessControl.UseRoles({
    resource: "Reservation",
    action: "read",
    possession: "any",
  })
  async reservations(
    @graphql.Parent() parent: ReservableSlot,
    @graphql.Args() args: ReservationFindManyArgs
  ): Promise<Reservation[]> {
    const results = await this.service.findReservations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TimeSlot, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "any",
  })
  async timeSlot(
    @graphql.Parent() parent: ReservableSlot
  ): Promise<TimeSlot | null> {
    const result = await this.service.getTimeSlot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
