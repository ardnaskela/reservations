/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCompanySetNotificationArgs } from "./CreateCompanySetNotificationArgs";
import { UpdateCompanySetNotificationArgs } from "./UpdateCompanySetNotificationArgs";
import { DeleteCompanySetNotificationArgs } from "./DeleteCompanySetNotificationArgs";
import { CompanySetNotificationFindManyArgs } from "./CompanySetNotificationFindManyArgs";
import { CompanySetNotificationFindUniqueArgs } from "./CompanySetNotificationFindUniqueArgs";
import { CompanySetNotification } from "./CompanySetNotification";
import { Company } from "../../company/base/Company";
import { Notification } from "../../notification/base/Notification";
import { CompanySetNotificationService } from "../companySetNotification.service";

@graphql.Resolver(() => CompanySetNotification)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CompanySetNotificationResolverBase {
  constructor(
    protected readonly service: CompanySetNotificationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "read",
    possession: "any",
  })
  async _companySetNotificationsMeta(
    @graphql.Args() args: CompanySetNotificationFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CompanySetNotification])
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "read",
    possession: "any",
  })
  async companySetNotifications(
    @graphql.Args() args: CompanySetNotificationFindManyArgs
  ): Promise<CompanySetNotification[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CompanySetNotification, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "read",
    possession: "own",
  })
  async companySetNotification(
    @graphql.Args() args: CompanySetNotificationFindUniqueArgs
  ): Promise<CompanySetNotification | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CompanySetNotification)
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "create",
    possession: "any",
  })
  async createCompanySetNotification(
    @graphql.Args() args: CreateCompanySetNotificationArgs
  ): Promise<CompanySetNotification> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        company: {
          connect: args.data.company,
        },

        notification: {
          connect: args.data.notification,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CompanySetNotification)
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "update",
    possession: "any",
  })
  async updateCompanySetNotification(
    @graphql.Args() args: UpdateCompanySetNotificationArgs
  ): Promise<CompanySetNotification | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          company: {
            connect: args.data.company,
          },

          notification: {
            connect: args.data.notification,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanySetNotification)
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "delete",
    possession: "any",
  })
  async deleteCompanySetNotification(
    @graphql.Args() args: DeleteCompanySetNotificationArgs
  ): Promise<CompanySetNotification | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Company, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  async company(
    @graphql.Parent() parent: CompanySetNotification
  ): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Notification, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Notification",
    action: "read",
    possession: "any",
  })
  async notification(
    @graphql.Parent() parent: CompanySetNotification
  ): Promise<Notification | null> {
    const result = await this.service.getNotification(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
