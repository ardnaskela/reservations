/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CompanySetNotificationService } from "../companySetNotification.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CompanySetNotificationCreateInput } from "./CompanySetNotificationCreateInput";
import { CompanySetNotificationWhereInput } from "./CompanySetNotificationWhereInput";
import { CompanySetNotificationWhereUniqueInput } from "./CompanySetNotificationWhereUniqueInput";
import { CompanySetNotificationFindManyArgs } from "./CompanySetNotificationFindManyArgs";
import { CompanySetNotificationUpdateInput } from "./CompanySetNotificationUpdateInput";
import { CompanySetNotification } from "./CompanySetNotification";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CompanySetNotificationControllerBase {
  constructor(
    protected readonly service: CompanySetNotificationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CompanySetNotification })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: CompanySetNotificationCreateInput
  ): Promise<CompanySetNotification> {
    return await this.service.create({
      data: {
        ...data,

        company: {
          connect: data.company,
        },

        notification: {
          connect: data.notification,
        },
      },
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        customText: true,
        id: true,

        notification: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [CompanySetNotification] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(CompanySetNotificationFindManyArgs)
  async findMany(
    @common.Req() request: Request
  ): Promise<CompanySetNotification[]> {
    const args = plainToClass(
      CompanySetNotificationFindManyArgs,
      request.query
    );
    return this.service.findMany({
      ...args,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        customText: true,
        id: true,

        notification: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CompanySetNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: CompanySetNotificationWhereUniqueInput
  ): Promise<CompanySetNotification | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        customText: true,
        id: true,

        notification: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CompanySetNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: CompanySetNotificationWhereUniqueInput,
    @common.Body() data: CompanySetNotificationUpdateInput
  ): Promise<CompanySetNotification | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          company: {
            connect: data.company,
          },

          notification: {
            connect: data.notification,
          },
        },
        select: {
          company: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          customText: true,
          id: true,

          notification: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CompanySetNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: CompanySetNotificationWhereUniqueInput
  ): Promise<CompanySetNotification | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          company: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          customText: true,
          id: true,

          notification: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
