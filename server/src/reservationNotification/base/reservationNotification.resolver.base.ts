/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateReservationNotificationArgs } from "./CreateReservationNotificationArgs";
import { UpdateReservationNotificationArgs } from "./UpdateReservationNotificationArgs";
import { DeleteReservationNotificationArgs } from "./DeleteReservationNotificationArgs";
import { ReservationNotificationFindManyArgs } from "./ReservationNotificationFindManyArgs";
import { ReservationNotificationFindUniqueArgs } from "./ReservationNotificationFindUniqueArgs";
import { ReservationNotification } from "./ReservationNotification";
import { Notification } from "../../notification/base/Notification";
import { Reservation } from "../../reservation/base/Reservation";
import { ReservationNotificationService } from "../reservationNotification.service";

@graphql.Resolver(() => ReservationNotification)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ReservationNotificationResolverBase {
  constructor(
    protected readonly service: ReservationNotificationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReservationNotification",
    action: "read",
    possession: "any",
  })
  async _reservationNotificationsMeta(
    @graphql.Args() args: ReservationNotificationFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [ReservationNotification])
  @nestAccessControl.UseRoles({
    resource: "ReservationNotification",
    action: "read",
    possession: "any",
  })
  async reservationNotifications(
    @graphql.Args() args: ReservationNotificationFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<ReservationNotification[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "ReservationNotification",
    });
    const results = await this.service.findMany(args);
    return results.map((result) => permission.filter(result));
  }

  @graphql.Query(() => ReservationNotification, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReservationNotification",
    action: "read",
    possession: "own",
  })
  async reservationNotification(
    @graphql.Args() args: ReservationNotificationFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<ReservationNotification | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "ReservationNotification",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => ReservationNotification)
  @nestAccessControl.UseRoles({
    resource: "ReservationNotification",
    action: "create",
    possession: "any",
  })
  async createReservationNotification(
    @graphql.Args() args: CreateReservationNotificationArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<ReservationNotification> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "ReservationNotification",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"ReservationNotification"} creation is forbidden for roles: ${roles}`
      );
    }
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        notification: {
          connect: args.data.notification,
        },

        reservation: {
          connect: args.data.reservation,
        },
      },
    });
  }

  @graphql.Mutation(() => ReservationNotification)
  @nestAccessControl.UseRoles({
    resource: "ReservationNotification",
    action: "update",
    possession: "any",
  })
  async updateReservationNotification(
    @graphql.Args() args: UpdateReservationNotificationArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<ReservationNotification | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "ReservationNotification",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"ReservationNotification"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          notification: {
            connect: args.data.notification,
          },

          reservation: {
            connect: args.data.reservation,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReservationNotification)
  @nestAccessControl.UseRoles({
    resource: "ReservationNotification",
    action: "delete",
    possession: "any",
  })
  async deleteReservationNotification(
    @graphql.Args() args: DeleteReservationNotificationArgs
  ): Promise<ReservationNotification | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Notification, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReservationNotification",
    action: "read",
    possession: "any",
  })
  async notification(
    @graphql.Parent() parent: ReservationNotification,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Notification | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Notification",
    });
    const result = await this.service.getNotification(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => Reservation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReservationNotification",
    action: "read",
    possession: "any",
  })
  async reservation(
    @graphql.Parent() parent: ReservationNotification,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Reservation | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Reservation",
    });
    const result = await this.service.getReservation(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }
}
