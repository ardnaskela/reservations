/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFavoriteCompanyArgs } from "./CreateFavoriteCompanyArgs";
import { UpdateFavoriteCompanyArgs } from "./UpdateFavoriteCompanyArgs";
import { DeleteFavoriteCompanyArgs } from "./DeleteFavoriteCompanyArgs";
import { FavoriteCompanyFindManyArgs } from "./FavoriteCompanyFindManyArgs";
import { FavoriteCompanyFindUniqueArgs } from "./FavoriteCompanyFindUniqueArgs";
import { FavoriteCompany } from "./FavoriteCompany";
import { Company } from "../../company/base/Company";
import { Customer } from "../../customer/base/Customer";
import { FavoriteCompanyService } from "../favoriteCompany.service";

@graphql.Resolver(() => FavoriteCompany)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FavoriteCompanyResolverBase {
  constructor(
    protected readonly service: FavoriteCompanyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FavoriteCompany",
    action: "read",
    possession: "any",
  })
  async _favoriteCompaniesMeta(
    @graphql.Args() args: FavoriteCompanyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FavoriteCompany])
  @nestAccessControl.UseRoles({
    resource: "FavoriteCompany",
    action: "read",
    possession: "any",
  })
  async favoriteCompanies(
    @graphql.Args() args: FavoriteCompanyFindManyArgs
  ): Promise<FavoriteCompany[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FavoriteCompany, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FavoriteCompany",
    action: "read",
    possession: "own",
  })
  async favoriteCompany(
    @graphql.Args() args: FavoriteCompanyFindUniqueArgs
  ): Promise<FavoriteCompany | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FavoriteCompany)
  @nestAccessControl.UseRoles({
    resource: "FavoriteCompany",
    action: "create",
    possession: "any",
  })
  async createFavoriteCompany(
    @graphql.Args() args: CreateFavoriteCompanyArgs
  ): Promise<FavoriteCompany> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        company: args.data.company
          ? {
              connect: args.data.company,
            }
          : undefined,

        customer: {
          connect: args.data.customer,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FavoriteCompany)
  @nestAccessControl.UseRoles({
    resource: "FavoriteCompany",
    action: "update",
    possession: "any",
  })
  async updateFavoriteCompany(
    @graphql.Args() args: UpdateFavoriteCompanyArgs
  ): Promise<FavoriteCompany | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          company: args.data.company
            ? {
                connect: args.data.company,
              }
            : undefined,

          customer: {
            connect: args.data.customer,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FavoriteCompany)
  @nestAccessControl.UseRoles({
    resource: "FavoriteCompany",
    action: "delete",
    possession: "any",
  })
  async deleteFavoriteCompany(
    @graphql.Args() args: DeleteFavoriteCompanyArgs
  ): Promise<FavoriteCompany | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Company, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  async company(
    @graphql.Parent() parent: FavoriteCompany
  ): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async customer(
    @graphql.Parent() parent: FavoriteCompany
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
