/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLastSeenCompanyArgs } from "./CreateLastSeenCompanyArgs";
import { UpdateLastSeenCompanyArgs } from "./UpdateLastSeenCompanyArgs";
import { DeleteLastSeenCompanyArgs } from "./DeleteLastSeenCompanyArgs";
import { LastSeenCompanyFindManyArgs } from "./LastSeenCompanyFindManyArgs";
import { LastSeenCompanyFindUniqueArgs } from "./LastSeenCompanyFindUniqueArgs";
import { LastSeenCompany } from "./LastSeenCompany";
import { Company } from "../../company/base/Company";
import { Customer } from "../../customer/base/Customer";
import { LastSeenCompanyService } from "../lastSeenCompany.service";

@graphql.Resolver(() => LastSeenCompany)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class LastSeenCompanyResolverBase {
  constructor(
    protected readonly service: LastSeenCompanyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LastSeenCompany",
    action: "read",
    possession: "any",
  })
  async _lastSeenCompaniesMeta(
    @graphql.Args() args: LastSeenCompanyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LastSeenCompany])
  @nestAccessControl.UseRoles({
    resource: "LastSeenCompany",
    action: "read",
    possession: "any",
  })
  async lastSeenCompanies(
    @graphql.Args() args: LastSeenCompanyFindManyArgs
  ): Promise<LastSeenCompany[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LastSeenCompany, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LastSeenCompany",
    action: "read",
    possession: "own",
  })
  async lastSeenCompany(
    @graphql.Args() args: LastSeenCompanyFindUniqueArgs
  ): Promise<LastSeenCompany | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LastSeenCompany)
  @nestAccessControl.UseRoles({
    resource: "LastSeenCompany",
    action: "create",
    possession: "any",
  })
  async createLastSeenCompany(
    @graphql.Args() args: CreateLastSeenCompanyArgs
  ): Promise<LastSeenCompany> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        company: args.data.company
          ? {
              connect: args.data.company,
            }
          : undefined,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LastSeenCompany)
  @nestAccessControl.UseRoles({
    resource: "LastSeenCompany",
    action: "update",
    possession: "any",
  })
  async updateLastSeenCompany(
    @graphql.Args() args: UpdateLastSeenCompanyArgs
  ): Promise<LastSeenCompany | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          company: args.data.company
            ? {
                connect: args.data.company,
              }
            : undefined,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LastSeenCompany)
  @nestAccessControl.UseRoles({
    resource: "LastSeenCompany",
    action: "delete",
    possession: "any",
  })
  async deleteLastSeenCompany(
    @graphql.Args() args: DeleteLastSeenCompanyArgs
  ): Promise<LastSeenCompany | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Company, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  async company(
    @graphql.Parent() parent: LastSeenCompany
  ): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async customer(
    @graphql.Parent() parent: LastSeenCompany
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
