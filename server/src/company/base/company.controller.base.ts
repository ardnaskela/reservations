/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CompanyService } from "../company.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CompanyCreateInput } from "./CompanyCreateInput";
import { CompanyWhereInput } from "./CompanyWhereInput";
import { CompanyWhereUniqueInput } from "./CompanyWhereUniqueInput";
import { CompanyFindManyArgs } from "./CompanyFindManyArgs";
import { CompanyUpdateInput } from "./CompanyUpdateInput";
import { Company } from "./Company";
import { CompanySetNotificationFindManyArgs } from "../../companySetNotification/base/CompanySetNotificationFindManyArgs";
import { CompanySetNotification } from "../../companySetNotification/base/CompanySetNotification";
import { CompanySetNotificationWhereUniqueInput } from "../../companySetNotification/base/CompanySetNotificationWhereUniqueInput";
import { FavoriteCompanyFindManyArgs } from "../../favoriteCompany/base/FavoriteCompanyFindManyArgs";
import { FavoriteCompany } from "../../favoriteCompany/base/FavoriteCompany";
import { FavoriteCompanyWhereUniqueInput } from "../../favoriteCompany/base/FavoriteCompanyWhereUniqueInput";
import { LastSeenCompanyFindManyArgs } from "../../lastSeenCompany/base/LastSeenCompanyFindManyArgs";
import { LastSeenCompany } from "../../lastSeenCompany/base/LastSeenCompany";
import { LastSeenCompanyWhereUniqueInput } from "../../lastSeenCompany/base/LastSeenCompanyWhereUniqueInput";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { ReservationWhereUniqueInput } from "../../reservation/base/ReservationWhereUniqueInput";
import { TimeSlotFindManyArgs } from "../../timeSlot/base/TimeSlotFindManyArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { TimeSlotWhereUniqueInput } from "../../timeSlot/base/TimeSlotWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CompanyControllerBase {
  constructor(
    protected readonly service: CompanyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Company })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: CompanyCreateInput): Promise<Company> {
    return await this.service.create({
      data: {
        ...data,

        address: {
          connect: data.address,
        },

        companyType: {
          connect: data.companyType,
        },

        owner: {
          connect: data.owner,
        },
      },
      select: {
        address: {
          select: {
            id: true,
          },
        },

        companyType: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        logo: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        phoneNumber: true,
        updatedAt: true,
        vatCode: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Company] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(CompanyFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Company[]> {
    const args = plainToClass(CompanyFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        address: {
          select: {
            id: true,
          },
        },

        companyType: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        logo: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        phoneNumber: true,
        updatedAt: true,
        vatCode: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<Company | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        address: {
          select: {
            id: true,
          },
        },

        companyType: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        logo: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        phoneNumber: true,
        updatedAt: true,
        vatCode: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() data: CompanyUpdateInput
  ): Promise<Company | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          address: {
            connect: data.address,
          },

          companyType: {
            connect: data.companyType,
          },

          owner: {
            connect: data.owner,
          },
        },
        select: {
          address: {
            select: {
              id: true,
            },
          },

          companyType: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          logo: true,
          name: true,

          owner: {
            select: {
              id: true,
            },
          },

          phoneNumber: true,
          updatedAt: true,
          vatCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<Company | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          address: {
            select: {
              id: true,
            },
          },

          companyType: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          logo: true,
          name: true,

          owner: {
            select: {
              id: true,
            },
          },

          phoneNumber: true,
          updatedAt: true,
          vatCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/companySetNotifications")
  @ApiNestedQuery(CompanySetNotificationFindManyArgs)
  async findManyCompanySetNotifications(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<CompanySetNotification[]> {
    const query = plainToClass(
      CompanySetNotificationFindManyArgs,
      request.query
    );
    const results = await this.service.findCompanySetNotifications(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        customText: true,
        id: true,

        notification: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/companySetNotifications")
  async connectCompanySetNotifications(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: CompanySetNotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companySetNotifications: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/companySetNotifications")
  async updateCompanySetNotifications(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: CompanySetNotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companySetNotifications: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/companySetNotifications")
  async disconnectCompanySetNotifications(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: CompanySetNotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companySetNotifications: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FavoriteCompany",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/favoriteCompanies")
  @ApiNestedQuery(FavoriteCompanyFindManyArgs)
  async findManyFavoriteCompanies(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<FavoriteCompany[]> {
    const query = plainToClass(FavoriteCompanyFindManyArgs, request.query);
    const results = await this.service.findFavoriteCompanies(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/favoriteCompanies")
  async connectFavoriteCompanies(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: FavoriteCompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteCompanies: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/favoriteCompanies")
  async updateFavoriteCompanies(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: FavoriteCompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteCompanies: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/favoriteCompanies")
  async disconnectFavoriteCompanies(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: FavoriteCompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favoriteCompanies: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "LastSeenCompany",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/lastSeenCompanies")
  @ApiNestedQuery(LastSeenCompanyFindManyArgs)
  async findManyLastSeenCompanies(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<LastSeenCompany[]> {
    const query = plainToClass(LastSeenCompanyFindManyArgs, request.query);
    const results = await this.service.findLastSeenCompanies(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/lastSeenCompanies")
  async connectLastSeenCompanies(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: LastSeenCompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lastSeenCompanies: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/lastSeenCompanies")
  async updateLastSeenCompanies(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: LastSeenCompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lastSeenCompanies: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/lastSeenCompanies")
  async disconnectLastSeenCompanies(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: LastSeenCompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lastSeenCompanies: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Reservation",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/reservations")
  @ApiNestedQuery(ReservationFindManyArgs)
  async findManyReservations(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<Reservation[]> {
    const query = plainToClass(ReservationFindManyArgs, request.query);
    const results = await this.service.findReservations(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        isAccepted: true,

        reservableSlot: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/reservations")
  async connectReservations(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/reservations")
  async updateReservations(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/reservations")
  async disconnectReservations(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/timeSlots")
  @ApiNestedQuery(TimeSlotFindManyArgs)
  async findManyTimeSlots(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<TimeSlot[]> {
    const query = plainToClass(TimeSlotFindManyArgs, request.query);
    const results = await this.service.findTimeSlots(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dayOfWeek: true,
        id: true,
        maxSeatsAvailable: true,
        timeFrom: true,
        timeTo: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/timeSlots")
  async connectTimeSlots(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/timeSlots")
  async updateTimeSlots(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/timeSlots")
  async disconnectTimeSlots(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: TimeSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timeSlots: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
