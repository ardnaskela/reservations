/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AddressWhereUniqueInput } from "../../address/base/AddressWhereUniqueInput";
import { ValidateNested, IsOptional, IsString } from "class-validator";
import { Type } from "class-transformer";
import { CompanySetNotificationUpdateManyWithoutCompaniesInput } from "./CompanySetNotificationUpdateManyWithoutCompaniesInput";
import { CompanyTypeWhereUniqueInput } from "../../companyType/base/CompanyTypeWhereUniqueInput";
import { FavoriteCompanyUpdateManyWithoutCompaniesInput } from "./FavoriteCompanyUpdateManyWithoutCompaniesInput";
import { LastSeenCompanyUpdateManyWithoutCompaniesInput } from "./LastSeenCompanyUpdateManyWithoutCompaniesInput";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { ReservationUpdateManyWithoutCompaniesInput } from "./ReservationUpdateManyWithoutCompaniesInput";
import { TimeSlotUpdateManyWithoutCompaniesInput } from "./TimeSlotUpdateManyWithoutCompaniesInput";
@InputType()
class CompanyUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AddressWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AddressWhereUniqueInput)
  @IsOptional()
  @Field(() => AddressWhereUniqueInput, {
    nullable: true,
  })
  address?: AddressWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => CompanySetNotificationUpdateManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => CompanySetNotificationUpdateManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => CompanySetNotificationUpdateManyWithoutCompaniesInput, {
    nullable: true,
  })
  companySetNotifications?: CompanySetNotificationUpdateManyWithoutCompaniesInput;

  @ApiProperty({
    required: false,
    type: () => CompanyTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CompanyTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => CompanyTypeWhereUniqueInput, {
    nullable: true,
  })
  companyType?: CompanyTypeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => FavoriteCompanyUpdateManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => FavoriteCompanyUpdateManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => FavoriteCompanyUpdateManyWithoutCompaniesInput, {
    nullable: true,
  })
  favoriteCompanies?: FavoriteCompanyUpdateManyWithoutCompaniesInput;

  @ApiProperty({
    required: false,
    type: () => LastSeenCompanyUpdateManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => LastSeenCompanyUpdateManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => LastSeenCompanyUpdateManyWithoutCompaniesInput, {
    nullable: true,
  })
  lastSeenCompanies?: LastSeenCompanyUpdateManyWithoutCompaniesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  logo?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string;

  @ApiProperty({
    required: false,
    type: () => CustomerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CustomerWhereUniqueInput)
  @IsOptional()
  @Field(() => CustomerWhereUniqueInput, {
    nullable: true,
  })
  owner?: CustomerWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber?: string;

  @ApiProperty({
    required: false,
    type: () => ReservationUpdateManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => ReservationUpdateManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => ReservationUpdateManyWithoutCompaniesInput, {
    nullable: true,
  })
  reservations?: ReservationUpdateManyWithoutCompaniesInput;

  @ApiProperty({
    required: false,
    type: () => TimeSlotUpdateManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => TimeSlotUpdateManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => TimeSlotUpdateManyWithoutCompaniesInput, {
    nullable: true,
  })
  timeSlots?: TimeSlotUpdateManyWithoutCompaniesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  vatCode?: string;
}
export { CompanyUpdateInput };
