/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCompanyArgs } from "./CreateCompanyArgs";
import { UpdateCompanyArgs } from "./UpdateCompanyArgs";
import { DeleteCompanyArgs } from "./DeleteCompanyArgs";
import { CompanyFindManyArgs } from "./CompanyFindManyArgs";
import { CompanyFindUniqueArgs } from "./CompanyFindUniqueArgs";
import { Company } from "./Company";
import { CompanySetNotificationFindManyArgs } from "../../companySetNotification/base/CompanySetNotificationFindManyArgs";
import { CompanySetNotification } from "../../companySetNotification/base/CompanySetNotification";
import { FavoriteCompanyFindManyArgs } from "../../favoriteCompany/base/FavoriteCompanyFindManyArgs";
import { FavoriteCompany } from "../../favoriteCompany/base/FavoriteCompany";
import { LastSeenCompanyFindManyArgs } from "../../lastSeenCompany/base/LastSeenCompanyFindManyArgs";
import { LastSeenCompany } from "../../lastSeenCompany/base/LastSeenCompany";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { TimeSlotFindManyArgs } from "../../timeSlot/base/TimeSlotFindManyArgs";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { Address } from "../../address/base/Address";
import { CompanyType } from "../../companyType/base/CompanyType";
import { Customer } from "../../customer/base/Customer";
import { CompanyService } from "../company.service";

@graphql.Resolver(() => Company)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CompanyResolverBase {
  constructor(
    protected readonly service: CompanyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  async _companiesMeta(
    @graphql.Args() args: CompanyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Company])
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  async companies(
    @graphql.Args() args: CompanyFindManyArgs
  ): Promise<Company[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Company, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "own",
  })
  async company(
    @graphql.Args() args: CompanyFindUniqueArgs
  ): Promise<Company | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Company)
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "create",
    possession: "any",
  })
  async createCompany(
    @graphql.Args() args: CreateCompanyArgs
  ): Promise<Company> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        address: {
          connect: args.data.address,
        },

        companyType: {
          connect: args.data.companyType,
        },

        owner: {
          connect: args.data.owner,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Company)
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async updateCompany(
    @graphql.Args() args: UpdateCompanyArgs
  ): Promise<Company | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          address: {
            connect: args.data.address,
          },

          companyType: {
            connect: args.data.companyType,
          },

          owner: {
            connect: args.data.owner,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Company)
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "delete",
    possession: "any",
  })
  async deleteCompany(
    @graphql.Args() args: DeleteCompanyArgs
  ): Promise<Company | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CompanySetNotification])
  @nestAccessControl.UseRoles({
    resource: "CompanySetNotification",
    action: "read",
    possession: "any",
  })
  async companySetNotifications(
    @graphql.Parent() parent: Company,
    @graphql.Args() args: CompanySetNotificationFindManyArgs
  ): Promise<CompanySetNotification[]> {
    const results = await this.service.findCompanySetNotifications(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FavoriteCompany])
  @nestAccessControl.UseRoles({
    resource: "FavoriteCompany",
    action: "read",
    possession: "any",
  })
  async favoriteCompanies(
    @graphql.Parent() parent: Company,
    @graphql.Args() args: FavoriteCompanyFindManyArgs
  ): Promise<FavoriteCompany[]> {
    const results = await this.service.findFavoriteCompanies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [LastSeenCompany])
  @nestAccessControl.UseRoles({
    resource: "LastSeenCompany",
    action: "read",
    possession: "any",
  })
  async lastSeenCompanies(
    @graphql.Parent() parent: Company,
    @graphql.Args() args: LastSeenCompanyFindManyArgs
  ): Promise<LastSeenCompany[]> {
    const results = await this.service.findLastSeenCompanies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Reservation])
  @nestAccessControl.UseRoles({
    resource: "Reservation",
    action: "read",
    possession: "any",
  })
  async reservations(
    @graphql.Parent() parent: Company,
    @graphql.Args() args: ReservationFindManyArgs
  ): Promise<Reservation[]> {
    const results = await this.service.findReservations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TimeSlot])
  @nestAccessControl.UseRoles({
    resource: "TimeSlot",
    action: "read",
    possession: "any",
  })
  async timeSlots(
    @graphql.Parent() parent: Company,
    @graphql.Args() args: TimeSlotFindManyArgs
  ): Promise<TimeSlot[]> {
    const results = await this.service.findTimeSlots(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Address, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "read",
    possession: "any",
  })
  async address(@graphql.Parent() parent: Company): Promise<Address | null> {
    const result = await this.service.getAddress(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CompanyType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CompanyType",
    action: "read",
    possession: "any",
  })
  async companyType(
    @graphql.Parent() parent: Company
  ): Promise<CompanyType | null> {
    const result = await this.service.getCompanyType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async owner(@graphql.Parent() parent: Company): Promise<Customer | null> {
    const result = await this.service.getOwner(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
